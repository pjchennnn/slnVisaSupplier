@section Styles
{
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        }

        #chartdiv {
            width: 100%;
            height: 550px;
        }

    </style>
    
}
<script>
    console.clear();
    let resultObject = {};
    const fetchString = '@Url.Content("~/TVproducts/VVProductEnabled")'
    async function getProductCount() {
        try {
            const response = await fetch(fetchString)
            if (!response.ok) {
                console.log(response.status);
                throw new Error(`${response.status}`);
            }
            const data = await response.json();

            const countryCount = {};
            data.forEach(item => {
                const country = item["國家"];
                if (country in countryCount) {
                    countryCount[country]++;
                } else {
                    countryCount[country] = 1;
                }
            });

            Object.keys(countryCount).forEach(country => {
                resultObject[country] = countryCount[country];
            });


            

            const convertedData = [];

            // 遍历resultObject中的每个键值对
            for (const country in resultObject) {
                if (resultObject.hasOwnProperty(country)) {
                    // 将中文国家名称转换为大写的英文名称
                    const englishCountry = Object.keys(am5geodata_lang_tw_ZH).find(key => am5geodata_lang_tw_ZH[key] === country);
                    
                    // 检查englishCountry是否存在于lang中，如果存在，则获取其对应的字母代号作为id
                    const id = englishCountry;

                    // 如果id存在，则将该条数据添加到convertedData中
                    if (id) {
                        convertedData.push({
                            id: id,
                            detail: "商品數量: " + resultObject[country]
                        });
                    }
                }
            }
            groupData.push({
                "name": "商品地區",
                "data": convertedData
            });

            return true;
        }
        catch (error) {
            console.log(`${error.message}`);
            console.log('fetchFail')
            return false;
        }
    }
</script>


<div id="chartdiv"></div>



@section Scripts
{
    <script src="~/js/visaData.js" asp-append-version="true"></script>
    <script src="//cdn.amcharts.com/lib/5/index.js"></script>
    <script src="//cdn.amcharts.com/lib/5/map.js"></script>
    <script src="~/js/worldLow.js" asp-append-version="true"></script>
    <script src="~/js/translate.js" asp-append-version="true"></script>
    <script src="//cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    
    <script>

        

        am5.ready(function () {

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv");


            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root)
            ]);


            // Create the map chart
            // https://www.amcharts.com/docs/v5/charts/map-chart/
            // setting rotationX to -154.8 makes the map Pacific-centered
            var chart = root.container.children.push(am5map.MapChart.new(root, {
                panX: "rotateX",
                panY: "none",
                projection: am5map.geoNaturalEarth1(),
                rotationX: -5
            }));


            // Create main polygon series for countries
            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow,
                geodataNames: am5geodata_lang_tw_ZH
            }));

            //所有顏色單一顏色
            // polygonSeries.mapPolygons.template.setAll({
            //     fill: am5.color(0x6794dc)
            // });


            //隨機顏色
            var colorSet = am5.ColorSet.new(root, {});
            var i = 0;
            polygonSeries.mapPolygons.template.adapters.add("fill", function (fill, target) {
                if (i < 10) {
                    i++;
                }
                else {
                    i = 0;
                }
                var dataContext = target.dataItem.dataContext;
                if (!dataContext.colorWasSet) {
                    dataContext.colorWasSet = true;
                    var color = am5.Color.saturate(colorSet.getIndex(i*4), 0.3);
                    target.setRaw("fill", color);
                    return color;
                }
                else {
                    return fill;
                }
            })




            // Add legend
            var legend = chart.children.push(am5.Legend.new(root, {
                useDefaultMarker: true,
                centerX: am5.p50,
                x: am5.p50,
                centerY: am5.p100,
                y: am5.p100,
                dy: -20,
                background: am5.RoundedRectangle.new(root, {
                    fill: am5.color(0xffffff),
                    fillOpacity: 0.2
                })
            }));

            legend.valueLabels.template.set("forceHidden", true)


            // Create series for each group
            var colors = am5.ColorSet.new(root, {
                step: 77
            });
            colors.next();


            polygonSeries.mapPolygons.template.states.create("hover", { fillOpacity: 1 });



            (async () => {
                const fetchResult = await getProductCount();
                if (fetchResult === true) {


                    am5.array.each(groupData, function (group) {
                        var countries = [];
                        var color = colors.next();

                        am5.array.each(group.data, function (country) {
                            countries.push(country.id)
                        });

                        console.log("push")



                        var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {
                            geoJSON: am5geodata_worldLow,
                            include: countries,
                            name: group.name,
                            fill: color,
                            fill: am5.Color.brighten(color, -0.2)
                        }));


                        polygonSeries.mapPolygons.template.setAll({
                            tooltipText: "{name}[/]\n{detail}",
                            interactive: true,
                            fill: color,
                            strokeWidth: 0.5
                        });

                        polygonSeries.mapPolygons.template.states.create("hover", {
                            fill: am5.Color.brighten(color, -0.4)
                        });


                        polygonSeries.mapPolygons.template.events.on("click", (ev) => {
                            var dataItem = ev.target.dataItem;
                            var data = dataItem.dataContext;
                            console.log(data.name)
                            console.log(data.detail)
                        });




                        polygonSeries.mapPolygons.template.events.on("pointerout", function (ev) {
                            ev.target.series.mapPolygons.each(function (polygon) {
                                polygon.states.applyAnimate("default");
                            });
                        });
                        polygonSeries.data.setAll(group.data);

                        legend.data.push(polygonSeries);
                    });


                }
                else { console.log('!') }
            })();


            polygonSeries.mapPolygons.template.setAll({
                tooltipText: "{name}",
                fillOpacity: 0.8
            });



            polygonSeries.mapPolygons.template.events.on("click", (ev) => {
                var dataItem = ev.target.dataItem;
                var data = dataItem.dataContext;
                console.log(data.name)
                console.log(data.detail)
            });







            //經緯度網格
            var graticuleSeries = chart.series.push(am5map.GraticuleSeries.new(root, {}));
            graticuleSeries.mapLines.template.setAll({
                stroke: root.interfaceColors.get("alternativeBackground"),
                strokeOpacity: 0.04
            });

            // Add zoom control
            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control
            chart.set("zoomControl", am5map.ZoomControl.new(root, {}));


            // Set clicking on "water" to zoom out
            chart.chartContainer.get("background").events.on("click", function () {
                chart.goHome();
            })


            var backgroundSeries = chart.series.unshift(
                am5map.MapPolygonSeries.new(root, {})
            );

            backgroundSeries.mapPolygons.template.setAll({
                fill: am5.color(0xedf7fa),
                stroke: am5.color(0xedf7fa),
            });

            backgroundSeries.data.push({
                geometry: am5map.getGeoRectangle(90, 180, -90, -180)
            });



            // Add projection buttons
            var buttons = chart.children.push(am5.Container.new(root, {
                x: am5.p100,
                dx: -13,
                centerX: am5.p100,
                y: am5.p100,
                dy: -110,
                centerY: am5.p100,
                layout: root.verticalLayout,
                paddingTop: 0,
                paddingRight: 0,
                paddingBottom: 0,
                paddingLeft: 0,
                background: am5.RoundedRectangle.new(root, {
                    fill: am5.color(0xffffff),
                    fillOpacity: 0.3
                })
            }));

            function createButton(text, projection) {
                var button = buttons.children.push(am5.Button.new(root, {
                    paddingTop: 0,
                    paddingRight: 0,
                    paddingBottom: 0,
                    paddingLeft: 0,
                    marginTop: 3,
                    marginLeft: 5,
                    marginRight: 5,
                    label: am5.Label.new(root, {
                        text: text,
                    })
                }));

                button.events.on("click", function () {
                    chart.set("projection", projection);
                });
            }

            createButton("1", am5map.geoNaturalEarth1());
            createButton("2", am5map.geoMercator());
            createButton("3", am5map.geoEquirectangular());
            createButton("4", am5map.geoOrthographic());







            // Make stuff animate on load
            chart.appear(1000, 100);
        });

       
    
    </script>
    
}