@section Styles
{
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
        }

        #chartdiv {
            width: 100%;
            height: 400px;
        }

    </style>
    
}
<script>
    console.clear();
    let resultObject = {};
    const fetchString = '@Url.Content("~/TVproducts/VVProductEnabled")'
    async function getProductCount() {
        try {
            const response = await fetch(fetchString)
            if (!response.ok) {
                console.log(response.status);
                throw new Error(`${response.status}`);
            }
            const data = await response.json();

            const countryCount = {};
            data.forEach(item => {
                const country = item["國家"];
                if (country in countryCount) {
                    countryCount[country]++;
                } else {
                    countryCount[country] = 1;
                }
            });

            Object.keys(countryCount).forEach(country => {
                resultObject[country] = countryCount[country];
            });

            return true;
        }
        catch (error) {
            console.log(`${error.message}`);
            console.log('fetchFail')
            return false;
        }
    }
</script>


<div id="chartdiv"></div>



@section Scripts
{
    
    <script src="//cdn.amcharts.com/lib/5/index.js"></script>
    <script src="//cdn.amcharts.com/lib/5/map.js"></script>
    <script src="~/js/worldLow.js" asp-append-version="true"></script>
    <script src="~/js/translate.js" asp-append-version="true"></script>
    <script src="//cdn.amcharts.com/lib/5/themes/Animated.js"></script>
    
    <script>
        
       
        am5.ready(function () {

            // Create root element
            // https://www.amcharts.com/docs/v5/getting-started/#Root_element
            var root = am5.Root.new("chartdiv");


            // Set themes
            // https://www.amcharts.com/docs/v5/concepts/themes/
            root.setThemes([
                am5themes_Animated.new(root)
            ]);


            // Create the map chart
            // https://www.amcharts.com/docs/v5/charts/map-chart/
            // setting rotationX to -154.8 makes the map Pacific-centered
            var chart = root.container.children.push(am5map.MapChart.new(root, {
                panX: "rotateX",
                panY: "none",
                projection: am5map.geoNaturalEarth1(),
                rotationX: -154.8
            }));


            // Create main polygon series for countries
            // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
            var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {
                geoJSON: am5geodata_worldLow
                //geodataNames: am5geodata_lang_tw_ZH
            }));





            var colorSet = am5.ColorSet.new(root, {});

            var i = 0;
            polygonSeries.mapPolygons.template.adapters.add("fill", function (fill, target) {
                if (i < 10) {
                    i++;
                }
                else {
                    i = 0;
                }
                var dataContext = target.dataItem.dataContext;
                if (!dataContext.colorWasSet) {
                    dataContext.colorWasSet = true;
                    var color = am5.Color.saturate(colorSet.getIndex(i), 0.3);
                    target.setRaw("fill", color);
                    return color;
                }
                else {
                    return fill;
                }
            })

            polygonSeries.mapPolygons.template.states.create("hover", { fillOpacity: 1 });

            var graticuleSeries = chart.series.push(am5map.GraticuleSeries.new(root, {}));
            graticuleSeries.mapLines.template.setAll({
                stroke: root.interfaceColors.get("alternativeBackground"),
                strokeOpacity: 0.1
            });

            // Add zoom control
            // https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control
            chart.set("zoomControl", am5map.ZoomControl.new(root, {}));


            // Set clicking on "water" to zoom out
            chart.chartContainer.get("background").events.on("click", function () {
                chart.goHome();
            })


            // Make stuff animate on load
            chart.appear(1000, 100);



            (async () => {
                const fetchResult = await getProductCount();
                if (fetchResult === true) {

                    const polygonData = Object.keys(am5geodata_lang_tw_ZH).map(countryCode => {
                        const country = am5geodata_lang_tw_ZH[countryCode];
                        const count = resultObject[country] || 0;
                        return {
                            id: countryCode,
                            productCount: count
                        };
                    });

                    polygonSeries.data.setAll(polygonData);
                    polygonSeries.mapPolygons.template.setAll({
                        tooltipText: "{name}" + "\n" + "[fontSize: 12px]商品數量: {productCount}",
                        fillOpacity: 0.8
                    });

                }
                else { console.log('!') }
            })();

            
        }); // end am5.ready()

       
    
    </script>
    
}